name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (emergency deployment only)'
        required: false
        default: false
        type: boolean

jobs:
  pre-deployment-checks:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.checks.outputs.should_deploy }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run comprehensive tests
      if: ${{ !inputs.skip_tests }}
      run: |
        npm run test:unit
        npm run test:integration
        npm run test:security
        npm run test:a11y

    - name: Security scan
      run: npm audit --audit-level moderate

    - name: Check deployment readiness
      id: checks
      run: |
        echo "should_deploy=true" >> $GITHUB_OUTPUT

  deploy-production:
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should_deploy == 'true'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build production application
      run: npm run build
      env:
        NODE_ENV: production

    - name: Backup current production database
      run: |
        npx supabase db dump --file backup-$(date +%Y%m%d-%H%M%S).sql
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

    - name: Deploy database migrations
      run: |
        npx supabase db deploy --production
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
        SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}

    - name: Deploy to Vercel Production
      id: deploy
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        vercel-args: '--prod'

    - name: Wait for deployment propagation
      run: sleep 30

    - name: Run smoke tests
      run: npm run test:smoke
      env:
        PRODUCTION_URL: ${{ steps.deploy.outputs.preview-url }}

    - name: Tag release
      run: |
        git tag v$(date +%Y%m%d-%H%M%S)
        git push origin --tags

  post-deployment:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always()
    
    steps:
    - name: Update monitoring
      run: |
        curl -X POST "${{ secrets.MONITORING_WEBHOOK }}" \
          -H "Content-Type: application/json" \
          -d '{"deployment": "production", "status": "${{ needs.deploy-production.result }}"}'

    - name: Notify team
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ needs.deploy-production.result }}
        text: "Production deployment ${{ needs.deploy-production.result }}"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}