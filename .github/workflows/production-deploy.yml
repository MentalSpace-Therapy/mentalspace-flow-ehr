name: Production Deployment

on:
  push:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to deploy'
        required: true
        default: 'main'

env:
  NODE_VERSION: '18'

jobs:
  pre-deployment-checks:
    name: Pre-deployment Validation
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.validation.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run production readiness checks
        id: validation
        run: |
          echo "Running production readiness validation..."
          
          # Check if all tests pass
          npm run test:ci
          
          # Check security vulnerabilities
          npm audit --audit-level high
          
          # Validate environment configuration
          npm run validate:env:production
          
          # Check HIPAA compliance requirements
          npm run validate:hipaa-compliance
          
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: pre-deployment-checks
    if: needs.pre-deployment-checks.outputs.should-deploy == 'true'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          VITE_ENVIRONMENT: production

      - name: Deploy to Lovable Production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment commands here
          # This integrates with Lovable's publish feature
        env:
          DEPLOY_TOKEN: ${{ secrets.PRODUCTION_DEPLOY_TOKEN }}

      - name: Run post-deployment health checks
        run: |
          echo "Running post-deployment health checks..."
          npm run health-check:production
        env:
          PRODUCTION_URL: ${{ secrets.PRODUCTION_URL }}

      - name: Create deployment record
        run: |
          echo "Recording deployment in audit log..."
          curl -X POST "${{ secrets.SUPABASE_URL }}/rest/v1/deployment_logs" \
            -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" \
            -H "Content-Type: application/json" \
            -d '{
              "version": "${{ github.sha }}",
              "environment": "production",
              "deployed_by": "${{ github.actor }}",
              "deployed_at": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "status": "success"
            }'

      - name: Notify successful deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: 'ðŸš€ Production deployment successful! Version: ${{ github.sha }}'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: deploy-production
    if: failure()
    steps:
      - name: Trigger rollback
        run: |
          echo "Deployment failed, initiating rollback..."
          # Add rollback logic here
        env:
          ROLLBACK_TOKEN: ${{ secrets.ROLLBACK_TOKEN }}

      - name: Notify deployment failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: 'ðŸš¨ Production deployment failed! Rollback initiated.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}